% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ebrel-package.R
\name{estimate_initial_temp_R}
\alias{estimate_initial_temp_R}
\title{Estimate initial temperature for simulated annealing}
\usage{
estimate_initial_temp_R(
  ebrel_obj,
  X0 = NULL,
  base_prob_X0 = 0.85,
  max_disp_thres = 50,
  disp_boundary = 30,
  alpha = 1,
  beta = 25,
  gamma = 100,
  step_proportion = 0.05,
  step_probability = 0.05,
  num_samples = 400,
  chi0 = 0.8,
  p = 2,
  tol_logchi = 0.001,
  max_iters = 50,
  T1 = NULL,
  max_tries_factor = 50,
  sigma = 0.05,
  seed = NULL,
  verbose = FALSE
)
}
\arguments{
\item{ebrel_obj}{External pointer created by \code{create_ebrel_class_object_R()}.}

\item{X0}{Optional initial configuration (type/shape as expected by \code{run_ebrel_R()}).}

\item{max_disp_thres}{Numeric; distance (in cells) after which universal dispersal is assumed.}

\item{disp_boundary}{Numeric; dispersal limit factor applied as \code{D[sp] * disp_boundary}.}

\item{alpha}{Numeric; weight for target attainment in the objective.}

\item{beta}{Numeric; weight for spatial aggregation in the objective.}

\item{gamma}{Numeric; weight for costs in the objective.}

\item{step_proportion}{Numeric in (0, 1]; proportion of eligible cells considered per proposal.}

\item{step_probability}{Numeric in \link{0, 1}; probability of assigning any habitat during a proposal.}

\item{num_samples}{Integer > 0; number of random neighbour proposals used to estimate acceptance.}

\item{chi0}{Numeric in (0, 1); target uphill acceptance rate (e.g., 0.8).}

\item{p}{Numeric >= 1; damping exponent in Ben-Ameur’s update.}

\item{tol_logchi}{Numeric > 0; tolerance for convergence on \code{log-acceptance}.}

\item{max_iters}{Integer >= 1; maximum number of fixed-point iterations.}

\item{max_tries_factor}{Integer >= 1; cap on total neighbour proposals (as a multiple of \code{num_samples}) to avoid stalls.}

\item{sigma}{Numeric; distance-weighting parameter for candidate selection.}

\item{seed}{Optional integer; RNG seed (use \code{NULL} for non-deterministic seeding).}

\item{verbose}{Logical; print progress messages.}

\item{T1_in}{Optional numeric; initial guess for \eqn{T_1}. If \code{NULL} or \eqn{\le 0}, a heuristic is used.}
}
\value{
A numeric scalar or a list containing the chosen initial temperature and diagnostics.
Replace with the exact structure returned by the C++ backend, e.g.:
\itemize{
\item \code{T1}: estimated initial temperature.
\item \code{chi_hat}: empirical uphill acceptance at \code{T1}.
\item \code{iters}: number of fixed-point iterations performed.
\item \code{samples}: number of proposals evaluated.
}
}
\description{
Chooses an initial SA temperature \eqn{T_1} so that the \emph{uphill} move
acceptance rate is close to a target \code{chi0}. The routine samples random
neighbour proposals from \code{Xseed} (or an internal seed if \code{NULL}),
estimates the empirical uphill acceptance at the current temperature, and
updates \eqn{T} via a Ben-Ameur–style fixed-point iteration until
\eqn{|log(chi_hat) - log(chi0)| <= tol_logchi} or \code{max_iters} is reached.
}
\examples{
\dontrun{
# Assume `obj` was created by create_ebrel_class_object_R(...)
T0 <- estimate_initial_temp_R(
  ebrel_obj = obj,
  num_samples = 400,
  chi0 = 0.8,
  step_proportion = 0.05,
  step_probability = 0.05,
  verbose = TRUE
)
}
}
\references{
Ben-Ameur, W. (2004). Computing the initial temperature of simulated annealing.
\emph{Computational Optimization and Applications}, 29, 369–385.
}
\seealso{
\code{\link{run_ebrel_R}}, \code{\link{create_ebrel_class_object_R}}
}
